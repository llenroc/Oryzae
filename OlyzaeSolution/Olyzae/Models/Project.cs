//------------------------------------------------------------------------------
// <auto-generated>
//    このコードはテンプレートから生成されました。
//
//    このファイルを手動で変更すると、アプリケーションで予期しない動作が発生する可能性があります。
//    このファイルに対する手動の変更は、コードが再生成されると上書きされます。
// </auto-generated>
//------------------------------------------------------------------------------

namespace NihonUnisys.Olyzae.Models
{
    using NihonUnisys.Olyzae.Framework;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.ComponentModel.DataAnnotations;
    
    public partial class Project
    {
        public Project()
        {
            this.MentorUsers = new HashSet<MentorUserProject>();
            this.ParticipantUsers = new HashSet<ParticipantUserProject>();
            this.ProjectGroups = new HashSet<ProjectGroup>();
            this.Theme = new HashSet<Theme>();
            this.Surveys = new HashSet<Questionnaire>();
            this.ProjectThreads = new HashSet<ProjectThread>();
        }
    
        public int ID { get; set; }
        [Required]
        public string Name { get; set; }
        [DataType(DataType.MultilineText)]
        [Required]
        public string Description { get; set; }
        public System.DateTime ProjectDate { get; set; }
        public ProjectCategory Category { get; set; }
        public ProjectStatus Status { get; set; }

        /// <summary>
        /// プロジェクトの参加募集定員
        /// </summary>
        public int ProjectQuota { get; set; }

        /// <summary>
        /// プロジェクトに応募した参加者の数。
        /// </summary>
        /// <remarks>
        /// ParticipantUsersの要素数と論理的に等しい。
        /// ProjectにProjectApplyを持たせることのメリットとデメリットは次の通り。
        /// メリット：Projectsテーブルのレコードのみ考慮すればいいため、同時実行制御の考慮が簡単になる。
        /// デメリット：アプリケーションが正しく管理しないと、ParticipantUserProjectsテーブルとの不整合が発生する。
        /// プロトタイプでは同時実行制御の考慮をしていないが、将来の対応を考慮して、ProjectApplyを持たせることとした。
        /// </remarks>
        public int ProjectApply { get; set; }

        public Guid? Icon { get; set; }

        public virtual Company Company { get; set; }
        public virtual ICollection<MentorUserProject> MentorUsers { get; set; }
        public virtual ICollection<ParticipantUserProject> ParticipantUsers { get; set; }
        public virtual ICollection<ProjectGroup> ProjectGroups { get; set; }
        public virtual Duration Duration { get; set; }
        public virtual ICollection<Theme> Theme { get; set; }
        public virtual ICollection<Questionnaire> Surveys { get; set; }
        public virtual ProjectPage ProjectPage { get; set; }
        public virtual ICollection<ProjectThread> ProjectThreads { get; set; }

        public bool? IsAcceptingApplication()
        {
            if (Duration == null)
            {
                return null;
            }

            if (Status != ProjectStatus.Accepting)
            {
                return false;
            }
            var now = ExecutionContext.Create().Now;
            if (now < Duration.From)
            {
                // Duration.Fromがnullの時はここに来ない
                return false;
            }
            if (Duration.To < now)
            {
                // Duration.Toがnullの時はここに来ない
                return false;
            }
            return true;
        }

        public bool? IsAccepted(ParticipantUser applicant)
        {
            if (applicant == null)
            {
                return null;
            }

            if (ParticipantUsers == null)
            {
                return null;
            }

            return ParticipantUsers.Any(x => x.ParticipantUser.ID == applicant.ID);
        }

        public bool HasReachedTheQuota()
        {
            return this.ProjectQuota <= this.ProjectApply;
        }

        public bool? IsCurrentUserAccepted()
        {
            return IsAccepted(ExecutionContext.Create().CurrentUser as ParticipantUser);
        }
    }
}
