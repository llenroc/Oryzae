//------------------------------------------------------------------------------
// <auto-generated>
//    このコードはテンプレートから生成されました。
//
//    このファイルを手動で変更すると、アプリケーションで予期しない動作が発生する可能性があります。
//    このファイルに対する手動の変更は、コードが再生成されると上書きされます。
// </auto-generated>
//------------------------------------------------------------------------------

namespace NihonUnisys.Olyzae.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("Entities")
        {
        }

        public Entities(string nameOrConnectionString)
            : base(nameOrConnectionString)
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            // http://msdn.microsoft.com/ja-jp/data/jj591617.aspx
            // Code Firstの場合、デフォルトではTPHになる。
            // (UsersテーブルやGroupsテーブルに"Discriminator"という識別用カラムができる)
            // Model Firstと同じTPTにしたければ、
            // エンティティに[Table]属性をつけるか、または以下のようなコードで
            // 派生型が使うテーブルを指定する必要がある。
            modelBuilder.Entity<AccountUser>().ToTable("Users_AccountUser");
            modelBuilder.Entity<ParticipantUser>().ToTable("Users_ParticipantUser");
            modelBuilder.Entity<MentorUser>().ToTable("Users_MentorUser");
            modelBuilder.Entity<ProjectGroup>().ToTable("Groups_ProjectGroup");
            modelBuilder.Entity<GroupThread>().ToTable("Threads_GroupThread");
            modelBuilder.Entity<PersonalThread>().ToTable("Threads_PersonalThread");
            modelBuilder.Entity<ProjectThread>().ToTable("Threads_ProjectThread");


            // http://msdn.microsoft.com/ja-jp/data/jj591620#RequiredToRequired
            // Code Firstの場合、One-To-Oneのリレーションシップが
            // 両側にナビゲーションプロパティを持っていると、
            // FKのマッピングができないことがある。
            // 両側にナビゲーションプロパティを持たせたければ、
            // FKを持たせる側のナビゲーションプロパティに[ForeignKey]属性をつけるか、
            // またはfluent APIを使用して
            // どちら側にFKを持たせるか指定する必要がある。
            // 今回は、ParticipantUserProject, Durationから
            // ナビゲーションプロパティを削除して対応した。
            // ただし、Project - ProjectPageのOne-To-Oneについては、
            // Project - ProjectPage - PageContent をまとめて取得するときに必要になるようなので
            // fluent APIを使用してリレーションシップのマッピングを追加している。
            //modelBuilder.Entity<Project>()
            //    .HasOptional(p => p.ProjectPage)
            //    .WithOptionalPrincipal(pp => pp.Project);
            modelBuilder.Entity<ProjectPage>()
                .HasOptional(pp => pp.Project)
                .WithOptionalPrincipal(p => p.ProjectPage);
        }
    
        public DbSet<User> Users { get; set; }
        public DbSet<Company> Companies { get; set; }
        public DbSet<Project> Projects { get; set; }
        public DbSet<MentorUserProject> MentorUserProjects { get; set; }
        public DbSet<ParticipantUserProject> ParticipantUserProjects { get; set; }
        public DbSet<Message> Messages { get; set; }
        public DbSet<Thread> Threads { get; set; }
        public DbSet<Duration> Durations { get; set; }
        public DbSet<Theme> Themes { get; set; }
        public DbSet<Group> Groups { get; set; }
        public DbSet<ParticipantUserGroup> ParticipantUserGroups { get; set; }
        public DbSet<GroupWork> GroupWorks { get; set; }
        public DbSet<Document> Documents { get; set; }
        public DbSet<Questionnaire> Questionnaires { get; set; }
        public DbSet<Answer> Answers { get; set; }
        public DbSet<ProjectPage> ProjectPages { get; set; }
        public DbSet<PageContent> PageContents { get; set; }
        public DbSet<UserMessage> UserMessages { get; set; }
        public DbSet<ParticipantUserThread> ParticipantUserThreads { get; set; }

        public DbSet<Timeline> Timelines { get; set; }
    }
}
