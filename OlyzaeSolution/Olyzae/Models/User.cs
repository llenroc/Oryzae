//------------------------------------------------------------------------------
// <auto-generated>
//    このコードはテンプレートから生成されました。
//
//    このファイルを手動で変更すると、アプリケーションで予期しない動作が発生する可能性があります。
//    このファイルに対する手動の変更は、コードが再生成されると上書きされます。
// </auto-generated>
//------------------------------------------------------------------------------

namespace NihonUnisys.Olyzae.Models
{
    using Microsoft.AspNet.Identity;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;

    public partial class User
    {
        public User()
        {
            this.SentMessages = new HashSet<Message>();
            this.Documents = new HashSet<Document>();
            this.ReceivedMessages = new HashSet<UserMessage>();
        }

        public int ID { get; set; }

        [Required]
        public string UserName { get; set; }

        /// <summary>
        /// ハッシュ化されていない生のパスワード。
        /// </summary>
        /// <remarks>
        /// 画面の入出力で使用します。データベースの入出力では使用しません。
        /// Required属性は付加しないので、
        /// 新規追加などで使用する場合は個別に必須チェックを実施する必要があります。
        /// </remarks>
        [NotMapped]
        [DataType(DataType.Password)]
        [Display(Name = "パスワード")]
        public string RawPassword { get; set; }

        /// <summary>
        /// ハッシュ化されたパスワード。
        /// </summary>
        /// <remarks>
        /// データベースの入出力で使用します。画面の入出力では使用しません。
        /// </remarks>
        public string Password { get; set; }

        public int UserType { get; set; }

        [Required]
        [Display(Name = "ユーザ名")]
        public string DisplayName { get; set; }

        public virtual ICollection<Message> SentMessages { get; set; }
        public virtual ICollection<Document> Documents { get; set; }
        public virtual ICollection<UserMessage> ReceivedMessages { get; set; }

        public static User Anonymous
        {
            get { return new User(); }
        }

        public virtual string Role
        {
            get
            {
                // ParticipantUser, AccountUser などの継承クラスを使用しない場合で、
                // 1以上のユーザIDが割り当てられていれば "Administrator" を返却する。
                // Anonymous の場合はIDが0になるため、string.Empty を返却する。
                return this.ID > 0 ? "Administrator" : string.Empty;
            }
        }

        /// <summary>
        /// 指定された生のパスワードが、ハッシュ化されたパスワード文字列と一致するかを返します。
        /// </summary>
        /// <param name="rawPassword">生のパスワード。</param>
        /// <returns></returns>
        public bool VerifyPassword(string rawPassword)
        {
            if (string.IsNullOrEmpty(this.Password))
            {
                return false;
            }
            var hasher = new PasswordHasher();
            var result = hasher.VerifyHashedPassword(this.Password, rawPassword);
            //  このメソッドは、PasswordVerificationResult.SuccessRehashNeeded を返さない。
            return (result == PasswordVerificationResult.Success);
        }

        /// <summary>
        /// ハッシュ化されたパスワード文字列を生成します。
        /// </summary>
        /// <remarks>
        /// <para>
        /// ハッシュ化実装には、Microsoft.AspNet.Identity.PasswordHasherクラスを使用します。
        /// </para>
        /// <para>
        /// RFC2898で定義されているPBKDF2アルゴリズムが使用されます。
        /// ソルトとして16バイトのランダムな値を生成し、
        /// HMAC-SHA1関数を1000回繰り返し適用することで32バイトのハッシュ値を計算します。
        /// 最後に、0 + ソルト + ハッシュ値 を連結した49バイトの値をBASE64で文字列化します。
        /// </para>
        /// </remarks>
        /// <param name="rawPassword">生のパスワード。</param>
        /// <returns>ソルトとハッシュ値を結合した文字列。</returns>
        public static string GenerateHashedPassword(string rawPassword)
        {
            var hasher = new PasswordHasher();
            return hasher.HashPassword(rawPassword);
        }
    }
}
